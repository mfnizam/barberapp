name: Development

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  workflow_call:
    inputs:
      MONGODB_URL:
        required: true
        type: string
      JWT_SECRET:
        required: true
        type: string
      SMTP_HOST:
        required: true
        type: string
      SMTP_PORT:
        required: true
        type: string
      SMTP_USERNAME:
        required: true
        type: string
      SMTP_PASSWORD:
        required: true
        type: string
      EMAIL_FROM:
        required: true
        type: string

jobs:
  checkenv:
    name: "Check Environment"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get Deploy Key
        id: get_deploy_key
        shell: bash
        run: |
          touch ".env"

          MONGODB_URL=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.MONGODB_URL }}" | base64 --decode))
          JWT_SECRET=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.JWT_SECRET }}" | base64 --decode))
          SMTP_HOST=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.SMTP_HOST }}" | base64 --decode))
          SMTP_PORT=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.SMTP_PORT }}" | base64 --decode))
          SMTP_USERNAME=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.SMTP_USERNAME }}" | base64 --decode))
          SMTP_PASSWORD=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.SMTP_PASSWORD }}" | base64 --decode))
          EMAIL_FROM=$(gpg --decrypt --quiet --batch --passphrase "(1fatikhunnizam1)" --output - <(echo "${{ inputs.EMAIL_FROM }}" | base64 --decode))

          echo MONGODB_URL
          echo JWT_SECRET
          echo SMTP_HOST
          echo SMTP_PORT
          echo SMTP_USERNAME
          echo SMTP_PASSWORD
          echo EMAIL_FROM
          
      # echo 'MONGODB_URL=${{ inputs.MONGODB_URL }}' >> .env
      # echo 'JWT_SECRET=${{ inputs.JWT_SECRET }}' >> .env
      
      # echo 'JWT_ACCESS_EXPIRATION_MINUTES=30' >> .env
      # echo 'JWT_REFRESH_EXPIRATION_DAYS=30' >> .env
      # echo 'JWT_RESET_PASSWORD_EXPIRATION_MINUTES=10' >> .env
      # echo 'JWT_VERIFY_EMAIL_EXPIRATION_MINUTES=10' >> .env
      
      # echo 'SMTP_HOST=${{ inputs.SMTP_HOST }}' >> .env
      # echo 'SMTP_PORT=${{ inputs.SMTP_PORT }}' >> .env
      # echo 'SMTP_USERNAME=${{ inputs.SMTP_USERNAME }}' >> .env
      # echo 'SMTP_PASSWORD=${{ inputs.SMTP_PASSWORD }}' >> .env
      # echo 'EMAIL_FROM=${{ inputs.EMAIL_FROM }}' >> .env

      # cat .env
          
  # quality:
  #   name: Code Quality
   
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [16.x]

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: ${{ matrix.node-version }}
    
  #   - name: Install dependencies
  #     run: npm install
    
  #   - name: Linting and fix
  #     run: npm run lint:fix --if-present

  #   - name: Prettier and fix
  #     run: npm run prettier:fix --if-present

  # test_and_coverage:
  #   name: Test And Code Coverage
  #   needs: quality
 
  #   runs-on: ubuntu-latest
    
  #   environment: development

  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #       mongodb-version: ['5.0']

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: ${{ matrix.node-version }}
        
  #   - name: Start MongoDB
  #     uses: supercharge/mongodb-github-action@1.8.0
  #     with:
  #       mongodb-version: ${{ matrix.mongodb-version }}
    
  #   - name: Store variables
  #     run: |
  #       touch ".env"
  #       echo 'MONGODB_URL=${{ secrets.MONGODB_URL }}' >> .env
  #       echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
        
  #       echo 'JWT_ACCESS_EXPIRATION_MINUTES=30' >> .env
  #       echo 'JWT_REFRESH_EXPIRATION_DAYS=30' >> .env
  #       echo 'JWT_RESET_PASSWORD_EXPIRATION_MINUTES=10' >> .env
  #       echo 'JWT_VERIFY_EMAIL_EXPIRATION_MINUTES=10' >> .env
        
  #       echo 'SMTP_HOST=${{ secrets.SMTP_HOST }}' >> .env
  #       echo 'SMTP_PORT=${{ secrets.SMTP_PORT }}' >> .env
  #       echo 'SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}' >> .env
  #       echo 'SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}' >> .env
  #       echo 'EMAIL_FROM=${{ secrets.EMAIL_FROM }}' >> .env
    
  #   - name: Install dependencies
  #     run: npm install

  #   - name: Build
  #     run: npm run build --if-present
    
  #   - name: Test & Coverage
  #     run: npm run coverage:ci --if-present
